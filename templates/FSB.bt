//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i;

struct {
  CHAR Magic[4];
  UINT FileCount;
  UINT Offset;
  UINT Offset; 
  UINT Offset; 
  UINT Size;
  UINT Unknown; 
  UINT Unknown;
} FILE_HEADER;

// datetime?
UINT Unknown; 
UINT Unknown;
UINT Unknown; 
UINT Unknown;

typedef struct {
    UINT16 Size;
    CHAR Filename[30];

    UINT Unknown1;
    UINT Unknown2;
    UINT Unknown;
    UINT Unknown3;
    UINT Unknown4;
    UINT Unknown;
    UINT16 A;
    UINT16 A;
    UINT16 A;
    UINT16 A;
    FLOAT Unknown;
    FLOAT Unknown;
    UINT Unknown;
    UINT Unknown;
} RECORD <name=getName>;

struct {
  RECORD Record[FILE_HEADER.FileCount];
} TABLE;

string getName(RECORD &rec) {
  return rec.Filename;
}

// 
UINT Unknown; 
UINT Unknown;
UINT Unknown; 
UINT Unknown;

for (i = 1; i < FILE_HEADER.FileCount; ++i) {
  struct {
    BYTE Data[TABLE.Record[i].Unknown4];
  } FILE;
};

